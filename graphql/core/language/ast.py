# This is autogenerated code. DO NOT change this manually.
# Run scripts/generate_ast.py to generate this file.


class Node(object):
    pass


class Definition(Node):
    pass


class Document(Node):
    __slots__ = ('loc', 'definitions')

    def __init__(self, definitions, loc=None):
        self.loc = loc
        self.definitions = definitions

    def clone(self):
        return Document(
            definitions=self.definitions,
        )

    def __eq__(self, other):
        return (
            isinstance(other, Document) and
            self.definitions == other.definitions
        )

    def __repr__(self):
        s = 'Document('
        s += 'definitions=' + repr(self.definitions)
        s += ')'
        return s


class OperationDefinition(Definition):
    __slots__ = ('loc', 'operation', 'name', 'variable_definitions', 'directives', 'selection_set')

    def __init__(self, operation, selection_set, name=None, variable_definitions=None, directives=None, loc=None):
        self.loc = loc
        self.operation = operation
        self.name = name
        self.variable_definitions = variable_definitions
        self.directives = directives
        self.selection_set = selection_set

    def clone(self):
        return OperationDefinition(
            operation=self.operation,
            name=self.name,
            variable_definitions=self.variable_definitions,
            directives=self.directives,
            selection_set=self.selection_set,
        )

    def __eq__(self, other):
        return (
            isinstance(other, OperationDefinition) and
            self.operation == other.operation and
            self.name == other.name and
            self.variable_definitions == other.variable_definitions and
            self.directives == other.directives and
            self.selection_set == other.selection_set
        )

    def __repr__(self):
        s = 'OperationDefinition('
        s += 'operation=' + repr(self.operation)
        s += ', name=' + repr(self.name)
        s += ', variable_definitions=' + repr(self.variable_definitions)
        s += ', directives=' + repr(self.directives)
        s += ', selection_set=' + repr(self.selection_set)
        s += ')'
        return s


class VariableDefinition(Node):
    __slots__ = ('loc', 'variable', 'type', 'default_value')

    def __init__(self, variable, type, default_value=None, loc=None):
        self.loc = loc
        self.variable = variable
        self.type = type
        self.default_value = default_value

    def clone(self):
        return VariableDefinition(
            variable=self.variable,
            type=self.type,
            default_value=self.default_value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, VariableDefinition) and
            self.variable == other.variable and
            self.type == other.type and
            self.default_value == other.default_value
        )

    def __repr__(self):
        s = 'VariableDefinition('
        s += 'variable=' + repr(self.variable)
        s += ', type=' + repr(self.type)
        s += ', default_value=' + repr(self.default_value)
        s += ')'
        return s


class SelectionSet(Node):
    __slots__ = ('loc', 'selections')

    def __init__(self, selections, loc=None):
        self.loc = loc
        self.selections = selections

    def clone(self):
        return SelectionSet(
            selections=self.selections,
        )

    def __eq__(self, other):
        return (
            isinstance(other, SelectionSet) and
            self.selections == other.selections
        )

    def __repr__(self):
        s = 'SelectionSet('
        s += 'selections=' + repr(self.selections)
        s += ')'
        return s


class Selection(Node):
    pass


class Field(Selection):
    __slots__ = ('loc', 'alias', 'name', 'arguments', 'directives', 'selection_set')

    def __init__(self, name, alias=None, arguments=None, directives=None, selection_set=None, loc=None):
        self.loc = loc
        self.alias = alias
        self.name = name
        self.arguments = arguments
        self.directives = directives
        self.selection_set = selection_set

    def clone(self):
        return Field(
            alias=self.alias,
            name=self.name,
            arguments=self.arguments,
            directives=self.directives,
            selection_set=self.selection_set,
        )

    def __eq__(self, other):
        return (
            isinstance(other, Field) and
            self.alias == other.alias and
            self.name == other.name and
            self.arguments == other.arguments and
            self.directives == other.directives and
            self.selection_set == other.selection_set
        )

    def __repr__(self):
        s = 'Field('
        s += 'alias=' + repr(self.alias)
        s += ', name=' + repr(self.name)
        s += ', arguments=' + repr(self.arguments)
        s += ', directives=' + repr(self.directives)
        s += ', selection_set=' + repr(self.selection_set)
        s += ')'
        return s


class Argument(Node):
    __slots__ = ('loc', 'name', 'value')

    def __init__(self, name, value, loc=None):
        self.loc = loc
        self.name = name
        self.value = value

    def clone(self):
        return Argument(
            name=self.name,
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, Argument) and
            self.name == other.name and
            self.value == other.value
        )

    def __repr__(self):
        s = 'Argument('
        s += 'name=' + repr(self.name)
        s += ', value=' + repr(self.value)
        s += ')'
        return s


class FragmentSpread(Selection):
    __slots__ = ('loc', 'name', 'directives')

    def __init__(self, name, directives=None, loc=None):
        self.loc = loc
        self.name = name
        self.directives = directives

    def clone(self):
        return FragmentSpread(
            name=self.name,
            directives=self.directives,
        )

    def __eq__(self, other):
        return (
            isinstance(other, FragmentSpread) and
            self.name == other.name and
            self.directives == other.directives
        )

    def __repr__(self):
        s = 'FragmentSpread('
        s += 'name=' + repr(self.name)
        s += ', directives=' + repr(self.directives)
        s += ')'
        return s


class InlineFragment(Selection):
    __slots__ = ('loc', 'type_condition', 'directives', 'selection_set')

    def __init__(self, type_condition, selection_set, directives=None, loc=None):
        self.loc = loc
        self.type_condition = type_condition
        self.directives = directives
        self.selection_set = selection_set

    def clone(self):
        return InlineFragment(
            type_condition=self.type_condition,
            directives=self.directives,
            selection_set=self.selection_set,
        )

    def __eq__(self, other):
        return (
            isinstance(other, InlineFragment) and
            self.type_condition == other.type_condition and
            self.directives == other.directives and
            self.selection_set == other.selection_set
        )

    def __repr__(self):
        s = 'InlineFragment('
        s += 'type_condition=' + repr(self.type_condition)
        s += ', directives=' + repr(self.directives)
        s += ', selection_set=' + repr(self.selection_set)
        s += ')'
        return s


class FragmentDefinition(Definition):
    __slots__ = ('loc', 'name', 'type_condition', 'directives', 'selection_set')

    def __init__(self, name, type_condition, selection_set, directives=None, loc=None):
        self.loc = loc
        self.name = name
        self.type_condition = type_condition
        self.directives = directives
        self.selection_set = selection_set

    def clone(self):
        return FragmentDefinition(
            name=self.name,
            type_condition=self.type_condition,
            directives=self.directives,
            selection_set=self.selection_set,
        )

    def __eq__(self, other):
        return (
            isinstance(other, FragmentDefinition) and
            self.name == other.name and
            self.type_condition == other.type_condition and
            self.directives == other.directives and
            self.selection_set == other.selection_set
        )

    def __repr__(self):
        s = 'FragmentDefinition('
        s += 'name=' + repr(self.name)
        s += ', type_condition=' + repr(self.type_condition)
        s += ', directives=' + repr(self.directives)
        s += ', selection_set=' + repr(self.selection_set)
        s += ')'
        return s


class Value(Node):
    pass


class Variable(Value):
    __slots__ = ('loc', 'name')

    def __init__(self, name, loc=None):
        self.loc = loc
        self.name = name

    def clone(self):
        return Variable(
            name=self.name,
        )

    def __eq__(self, other):
        return (
            isinstance(other, Variable) and
            self.name == other.name
        )

    def __repr__(self):
        s = 'Variable('
        s += 'name=' + repr(self.name)
        s += ')'
        return s


class IntValue(Value):
    __slots__ = ('loc', 'value')

    def __init__(self, value, loc=None):
        self.loc = loc
        self.value = value

    def clone(self):
        return IntValue(
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, IntValue) and
            self.value == other.value
        )

    def __repr__(self):
        s = 'IntValue('
        s += 'value=' + repr(self.value)
        s += ')'
        return s


class FloatValue(Value):
    __slots__ = ('loc', 'value')

    def __init__(self, value, loc=None):
        self.loc = loc
        self.value = value

    def clone(self):
        return FloatValue(
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, FloatValue) and
            self.value == other.value
        )

    def __repr__(self):
        s = 'FloatValue('
        s += 'value=' + repr(self.value)
        s += ')'
        return s


class StringValue(Value):
    __slots__ = ('loc', 'value')

    def __init__(self, value, loc=None):
        self.loc = loc
        self.value = value

    def clone(self):
        return StringValue(
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, StringValue) and
            self.value == other.value
        )

    def __repr__(self):
        s = 'StringValue('
        s += 'value=' + repr(self.value)
        s += ')'
        return s


class BooleanValue(Value):
    __slots__ = ('loc', 'value')

    def __init__(self, value, loc=None):
        self.loc = loc
        self.value = value

    def clone(self):
        return BooleanValue(
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, BooleanValue) and
            self.value == other.value
        )

    def __repr__(self):
        s = 'BooleanValue('
        s += 'value=' + repr(self.value)
        s += ')'
        return s


class EnumValue(Value):
    __slots__ = ('loc', 'value')

    def __init__(self, value, loc=None):
        self.loc = loc
        self.value = value

    def clone(self):
        return EnumValue(
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, EnumValue) and
            self.value == other.value
        )

    def __repr__(self):
        s = 'EnumValue('
        s += 'value=' + repr(self.value)
        s += ')'
        return s


class ListValue(Value):
    __slots__ = ('loc', 'values')

    def __init__(self, values, loc=None):
        self.loc = loc
        self.values = values

    def clone(self):
        return ListValue(
            values=self.values,
        )

    def __eq__(self, other):
        return (
            isinstance(other, ListValue) and
            self.values == other.values
        )

    def __repr__(self):
        s = 'ListValue('
        s += 'values=' + repr(self.values)
        s += ')'
        return s


class ObjectValue(Value):
    __slots__ = ('loc', 'fields')

    def __init__(self, fields, loc=None):
        self.loc = loc
        self.fields = fields

    def clone(self):
        return ObjectValue(
            fields=self.fields,
        )

    def __eq__(self, other):
        return (
            isinstance(other, ObjectValue) and
            self.fields == other.fields
        )

    def __repr__(self):
        s = 'ObjectValue('
        s += 'fields=' + repr(self.fields)
        s += ')'
        return s


class ObjectField(Node):
    __slots__ = ('loc', 'name', 'value')

    def __init__(self, name, value, loc=None):
        self.loc = loc
        self.name = name
        self.value = value

    def clone(self):
        return ObjectField(
            name=self.name,
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, ObjectField) and
            self.name == other.name and
            self.value == other.value
        )

    def __repr__(self):
        s = 'ObjectField('
        s += 'name=' + repr(self.name)
        s += ', value=' + repr(self.value)
        s += ')'
        return s


class Directive(Node):
    __slots__ = ('loc', 'name', 'arguments')

    def __init__(self, name, arguments=None, loc=None):
        self.loc = loc
        self.name = name
        self.arguments = arguments

    def clone(self):
        return Directive(
            name=self.name,
            arguments=self.arguments,
        )

    def __eq__(self, other):
        return (
            isinstance(other, Directive) and
            self.name == other.name and
            self.arguments == other.arguments
        )

    def __repr__(self):
        s = 'Directive('
        s += 'name=' + repr(self.name)
        s += ', arguments=' + repr(self.arguments)
        s += ')'
        return s


class Type(Node):
    pass


class NamedType(Type):
    __slots__ = ('loc', 'name')

    def __init__(self, name, loc=None):
        self.loc = loc
        self.name = name

    def clone(self):
        return NamedType(
            name=self.name,
        )

    def __eq__(self, other):
        return (
            isinstance(other, NamedType) and
            self.name == other.name
        )

    def __repr__(self):
        s = 'NamedType('
        s += 'name=' + repr(self.name)
        s += ')'
        return s


class ListType(Type):
    __slots__ = ('loc', 'type')

    def __init__(self, type, loc=None):
        self.loc = loc
        self.type = type

    def clone(self):
        return ListType(
            type=self.type,
        )

    def __eq__(self, other):
        return (
            isinstance(other, ListType) and
            self.type == other.type
        )

    def __repr__(self):
        s = 'ListType('
        s += 'type=' + repr(self.type)
        s += ')'
        return s


class NonNullType(Type):
    __slots__ = ('loc', 'type')

    def __init__(self, type, loc=None):
        self.loc = loc
        self.type = type

    def clone(self):
        return NonNullType(
            type=self.type,
        )

    def __eq__(self, other):
        return (
            isinstance(other, NonNullType) and
            self.type == other.type
        )

    def __repr__(self):
        s = 'NonNullType('
        s += 'type=' + repr(self.type)
        s += ')'
        return s


class Name(Node):
    __slots__ = ('loc', 'value')

    def __init__(self, value, loc=None):
        self.loc = loc
        self.value = value

    def clone(self):
        return Name(
            value=self.value,
        )

    def __eq__(self, other):
        return (
            isinstance(other, Name) and
            self.value == other.value
        )

    def __repr__(self):
        s = 'Name('
        s += 'value=' + repr(self.value)
        s += ')'
        return s
